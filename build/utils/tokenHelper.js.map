{"version":3,"sources":["../../utils/tokenHelper.js"],"names":["JWT_KEY","process","env","generateToken","id","_id","email","username","expiresIn","verifyToken","req","authorization","headers","token","split","user","error","AuthenticationError","Error"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;IAEQA,O,GAAYC,OAAO,CAACC,G,CAApBF,O;;AAER,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,OAAkC;AAAA,MAA1BC,EAA0B,QAA/BC,GAA+B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACtD,SAAO,wBAAK;AAAEH,IAAAA,EAAE,EAAFA,EAAF;AAAME,IAAAA,KAAK,EAALA,KAAN;AAAaC,IAAAA,QAAQ,EAARA;AAAb,GAAL,EAA8BP,OAA9B,EAAuC;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAAvC,CAAP;AACD,CAFD;;;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,QAAa;AAAA,MAAVC,GAAU,SAAVA,GAAU;AAAA,MACvBC,aADuB,GACLD,GAAG,CAACE,OADC,CACvBD,aADuB;;AAE/B,MAAIA,aAAJ,EAAmB;AACjB,QAAME,KAAK,GAAGF,aAAa,CAACG,KAAd,CAAoB,SAApB,EAA+B,CAA/B,CAAd;;AACA,QAAID,KAAJ,EAAW;AACT,UAAI;AACF,YAAME,IAAI,GAAG,0BAAOF,KAAP,EAAcb,OAAd,CAAb;AACA,eAAOe,IAAP;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACd,cAAM,IAAIC,iCAAJ,CAAwB,uBAAxB,CAAN;AACD;AACF;;AACD,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,QAAM,IAAIA,KAAJ,CAAU,uCAAV,CAAN;AACD,CAfD","sourcesContent":["import { sign, verify } from 'jsonwebtoken';\nimport { AuthenticationError } from 'apollo-server';\nimport { config } from 'dotenv';\n\nconfig();\n\nconst { JWT_KEY } = process.env;\n\nconst generateToken = ({ _id: id, email, username }) => {\n  return sign({ id, email, username }, JWT_KEY, { expiresIn: '1h' });\n};\n\nconst verifyToken = ({ req }) => {\n  const { authorization } = req.headers;\n  if (authorization) {\n    const token = authorization.split('Bearer ')[1];\n    if (token) {\n      try {\n        const user = verify(token, JWT_KEY);\n        return user;\n      } catch (error) {\n        throw new AuthenticationError('Invalid/Expired Token');\n      }\n    }\n    throw new Error(\"Authentication token must be 'Bearer [token]'\");\n  }\n  throw new Error('Authorization header must be provided');\n};\n\nexport { generateToken, verifyToken };\n"],"file":"tokenHelper.js"}
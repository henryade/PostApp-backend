{"version":3,"sources":["../../utils/validators.js"],"names":["validateRegisterInput","username","email","password","confirmPassword","errors","trim","regEx","match","valid","Object","keys","length","validateLoginInput","validateCommentInput","body"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,eAA5B,EAAgD;AAC5E,MAAMC,MAAM,GAAG,EAAf;;AACA,MAAIJ,QAAQ,CAACK,IAAT,OAAoB,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,CAACJ,QAAP,GAAkB,4BAAlB;AACD;;AACD,MAAIC,KAAK,CAACI,IAAN,OAAiB,EAArB,EAAyB;AACvBD,IAAAA,MAAM,CAACH,KAAP,GAAe,yBAAf;AACD,GAFD,MAEO;AACL,QAAMK,KAAK,GAAG,qFAAd;;AACA,QAAI,CAACL,KAAK,CAACM,KAAN,CAAYD,KAAZ,CAAL,EAAyB;AACvBF,MAAAA,MAAM,CAACH,KAAP,GAAe,qCAAf;AACD;AACF;;AACD,MAAIC,QAAQ,KAAK,EAAjB,EAAqB;AACnBE,IAAAA,MAAM,CAACF,QAAP,GAAkB,yBAAlB;AACD,GAFD,MAEO,IAAIA,QAAQ,KAAKC,eAAjB,EAAkC;AACvCC,IAAAA,MAAM,CAACD,eAAP,GAAyB,sBAAzB;AACD;;AAED,SAAO;AACLC,IAAAA,MAAM,EAANA,MADK;AAELI,IAAAA,KAAK,EAAEC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,GAA6B;AAF/B,GAAP;AAID,CAvBD;;;;AAyBA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACZ,QAAD,EAAWE,QAAX,EAAwB;AACjD,MAAME,MAAM,GAAG,EAAf;;AACA,MAAIJ,QAAQ,CAACK,IAAT,OAAoB,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,CAACJ,QAAP,GAAkB,4BAAlB;AACD;;AACD,MAAIE,QAAQ,CAACG,IAAT,OAAoB,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,CAACF,QAAP,GAAkB,4BAAlB;AACD;;AAED,SAAO;AACLE,IAAAA,MAAM,EAANA,MADK;AAELI,IAAAA,KAAK,EAAEC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,GAA6B;AAF/B,GAAP;AAID,CAbD;;;;AAeA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAU;AACrC,MAAMV,MAAM,GAAG,EAAf;;AACA,MAAIU,IAAI,CAACT,IAAL,OAAgB,EAApB,EAAwB;AACtBD,IAAAA,MAAM,CAACU,IAAP,GAAc,gCAAd;AACD;;AACD,SAAO;AACLV,IAAAA,MAAM,EAANA,MADK;AAELI,IAAAA,KAAK,EAAEC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,GAA6B;AAF/B,GAAP;AAID,CATD","sourcesContent":["const validateRegisterInput = (username, email, password, confirmPassword) => {\n  const errors = {};\n  if (username.trim() === '') {\n    errors.username = 'Username must not be empty';\n  }\n  if (email.trim() === '') {\n    errors.email = 'Email must not be empty';\n  } else {\n    const regEx = /^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$/;\n    if (!email.match(regEx)) {\n      errors.email = 'Email must be a valid email address';\n    }\n  }\n  if (password === '') {\n    errors.password = 'Password must not empty';\n  } else if (password !== confirmPassword) {\n    errors.confirmPassword = 'Passwords must match';\n  }\n\n  return {\n    errors,\n    valid: Object.keys(errors).length < 1\n  };\n};\n\nconst validateLoginInput = (username, password) => {\n  const errors = {};\n  if (username.trim() === '') {\n    errors.username = 'Username must not be empty';\n  }\n  if (password.trim() === '') {\n    errors.password = 'Password must not be empty';\n  }\n\n  return {\n    errors,\n    valid: Object.keys(errors).length < 1\n  };\n};\n\nconst validateCommentInput = (body) => {\n  const errors = {};\n  if (body.trim() === '') {\n    errors.body = 'Comment body must not be empty';\n  }\n  return {\n    errors,\n    valid: Object.keys(errors).length < 1\n  };\n};\n\nexport { validateRegisterInput, validateLoginInput, validateCommentInput };\n"],"file":"validators.js"}
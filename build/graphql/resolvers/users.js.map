{"version":3,"sources":["../../../graphql/resolvers/users.js"],"names":["Mutation","login","parent","loginInput","username","password","errors","valid","UserInputError","User","findOne","user","general","passwordMatch","AuthenticationError","token","_doc","id","_id","register","context","info","registerInput","email","confirmPassword","$or","newUser","createdAt","Date","toISOString","save","res"],"mappings":"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","sourcesContent":["import { hash, compare } from 'bcryptjs';\nimport { UserInputError, AuthenticationError } from 'apollo-server';\nimport { User } from '../../models';\nimport { validateRegisterInput, validateLoginInput, generateToken } from '../../utils';\n\nexport default {\n  Mutation: {\n    async login(parent, { loginInput: { username, password } }) {\n      const { errors, valid } = validateLoginInput(username, password);\n      if (!valid) {\n        throw new UserInputError('Errors', { errors });\n      }\n\n      const user = await User.findOne({ username });\n\n      if (!user) {\n        errors.general = \"User Not Found\";\n        throw new UserInputError('User Not Found', { errors });\n      }\n      const passwordMatch = await compare(password, user.password);\n      if (!passwordMatch) {\n        errors.general = \"Wrong Credentials\";\n        throw new AuthenticationError('Wrong Credentials', { errors });\n      }\n      const token = generateToken(user);\n      return {\n        ...user._doc,\n        id: user._id,\n        token\n      };\n    },\n    async register(\n      parent,\n      { registerInput: { username, password, email, confirmPassword } },\n      context,\n      info\n    ) {\n      const { errors, valid } = validateRegisterInput(username, email, password, confirmPassword);\n      if (!valid) {\n        throw new UserInputError('Errors', { errors });\n      }\n\n      const user = await User.findOne({ $or: [{ email }, { username }] });\n\n      if (user) {\n        if (user.email === email) {\n          throw new UserInputError('Email is taken', {\n            errors: {\n              email: 'This email is taken'\n            }\n          });\n        } else {\n          throw new UserInputError('Username is taken', {\n            errors: {\n              username: 'This username is taken'\n            }\n          });\n        }\n      }\n\n      password = await hash(password, 12);\n\n      const newUser = new User({\n        email,\n        username,\n        password,\n        createdAt: new Date().toISOString()\n      });\n\n      const res = await newUser.save();\n      const token = generateToken(res)\n\n      return {\n        ...res._doc,\n        id: res._id,\n        token\n      };\n    }\n  }\n};\n"],"file":"users.js"}
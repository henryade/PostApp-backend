{"version":3,"sources":["../../../graphql/resolvers/posts.js"],"names":["Query","getPosts","Post","find","sort","createdAt","posts","Error","getPost","parent","postId","findById","post","Mutation","createPost","context","body","user","trim","newPost","id","username","Date","toISOString","save","pubsub","publish","deletePost","a","AuthenticationError","Subscription","subscribe","args","asyncIterator"],"mappings":"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","sourcesContent":["import { AuthenticationError } from 'apollo-server';\nimport { Post } from '../../models';\nimport { verifyToken } from '../../utils';\n\nexport default {\n  Query: {\n    async getPosts() {\n      try {\n        const posts = await Post.find().sort({ createdAt: -1 });\n        return posts;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    async getPost(parent, { postId }) {\n      try {\n        const post = await Post.findById(postId);\n        if (post) {\n          return post;\n        } else {\n          throw new Error('Post Not Found');\n        }\n      } catch (error) {\n        throw new Error(error);\n      }\n    }\n  },\n  Mutation: {\n    async createPost(parent, { body }, context) {\n      const user = verifyToken(context);\n\n      if (body.trim() === '') {\n        throw new Error('Post body must not be empty');\n      }\n\n      const newPost = new Post({\n        body,\n        user: user.id,\n        username: user.username,\n        createdAt: new Date().toISOString()\n      });\n\n      const post = await newPost.save();\n      context.pubsub.publish('NEW_POST', { newPost: post });\n      return post;\n    },\n    async deletePost(parent, { postId }, context) {\n      const user = verifyToken(context);\n\n      try {\n        const post = await Post.findById(postId);\n        if (user.username === post.username) {\n          const a = await post.delete();\n          return 'Post Successfully Deleted';\n        } else {\n          throw new AuthenticationError('Action Not Allowed');\n        }\n      } catch (error) {\n        throw new Error(error);\n      }\n    }\n  },\n  Subscription: {\n    newPost: {\n      subscribe: (parent, args, { pubsub }) => pubsub.asyncIterator('NEW_POST')\n    }\n  }\n};\n"],"file":"posts.js"}
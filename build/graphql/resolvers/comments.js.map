{"version":3,"sources":["../../../graphql/resolvers/comments.js"],"names":["Mutation","createComment","parent","context","postId","body","username","errors","valid","UserInputError","Post","findById","post","comments","unshift","createdAt","Date","toISOString","save","deleteComment","commentId","commentIndex","findIndex","id","splice","AuthenticationError"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;eAEe;AACbA,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,uBAAOC,MAAP,QAAiCC,OAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBC,cAAAA,MAAjB,QAAiBA,MAAjB,EAAyBC,IAAzB,QAAyBA,IAAzB;AAAA,6BACQ,wBAAYF,OAAZ,CADR,EACLG,QADK,gBACLA,QADK;AAAA,sCAEa,iCAAqBD,IAArB,CAFb,EAELE,MAFK,yBAELA,MAFK,EAEGC,KAFH,yBAEGA,KAFH;;AAAA,kBAGRA,KAHQ;AAAA;AAAA;AAAA;;AAAA,oBAIL,IAAIC,4BAAJ,CAAmB,eAAnB,EAAoC;AAAEF,gBAAAA,MAAM,EAANA;AAAF,eAApC,CAJK;;AAAA;AAAA;AAAA,8CAOMG,aAAKC,QAAL,CAAcP,MAAd,CAPN;;AAAA;AAOPQ,cAAAA,IAPO;;AAAA,mBAQTA,IARS;AAAA;AAAA;AAAA;;AASXA,cAAAA,IAAI,CAACC,QAAL,CAAcC,OAAd,CAAsB;AACpBT,gBAAAA,IAAI,EAAJA,IADoB;AAEpBC,gBAAAA,QAAQ,EAARA,QAFoB;AAGpBS,gBAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAHS,eAAtB;AATW;AAAA,8CAcLL,IAAI,CAACM,IAAL,EAdK;;AAAA;AAAA,+CAeJN,IAfI;;AAAA;AAAA,oBAgBA,IAAIH,4BAAJ,CAAmB,gBAAnB,CAhBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADP;AAmBRU,IAAAA,aAAa,EAAE,uBAAOjB,MAAP,SAAsCC,OAAtC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBC,cAAAA,MAAjB,SAAiBA,MAAjB,EAAyBgB,SAAzB,SAAyBA,SAAzB;AAAA,8BACQ,wBAAYjB,OAAZ,CADR,EACLG,QADK,iBACLA,QADK;AAAA;AAAA,8CAGMI,aAAKC,QAAL,CAAcP,MAAd,CAHN;;AAAA;AAGPQ,cAAAA,IAHO;;AAAA,mBAITA,IAJS;AAAA;AAAA;AAAA;;AAKLS,cAAAA,YALK,GAKUT,IAAI,CAACC,QAAL,CAAcS,SAAd,CAAwB;AAAA,oBAAGC,EAAH,SAAGA,EAAH;AAAA,uBAAYA,EAAE,KAAKH,SAAnB;AAAA,eAAxB,CALV;;AAAA,mBAMPR,IAAI,CAACC,QAAL,CAAcQ,YAAd,CANO;AAAA;AAAA;AAAA;;AAAA,oBAONT,IAAI,CAACC,QAAL,CAAcQ,YAAd,EAA4Bf,QAA5B,KAAyCA,QAPnC;AAAA;AAAA;AAAA;;AAQPM,cAAAA,IAAI,CAACC,QAAL,CAAcW,MAAd,CAAqBH,YAArB,EAAmC,CAAnC;AARO;AAAA,8CASDT,IAAI,CAACM,IAAL,EATC;;AAAA;AAAA,gDAUAN,IAVA;;AAAA;AAAA,oBAWI,IAAIa,iCAAJ,CAAwB,oBAAxB,CAXJ;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAYE,IAAIhB,4BAAJ,CAAmB,mBAAnB,CAZF;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAaA,IAAIA,4BAAJ,CAAmB,gBAAnB,CAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBP;AADG,C","sourcesContent":["import { UserInputError, AuthenticationError } from 'apollo-server';\nimport { Post } from '../../models';\nimport { verifyToken, validateCommentInput } from '../../utils';\n\nexport default {\n  Mutation: {\n    createComment: async (parent, { postId, body }, context) => {\n      const { username } = verifyToken(context);\n      const { errors, valid } = validateCommentInput(body);\n      if (!valid) {\n        throw new UserInputError('Empty Comment', { errors });\n      }\n\n      const post = await Post.findById(postId);\n      if (post) {\n        post.comments.unshift({\n          body,\n          username,\n          createdAt: new Date().toISOString()\n        });\n        await post.save();\n        return post;\n      } else throw new UserInputError('Post Not Found');\n    },\n    deleteComment: async (parent, { postId, commentId }, context) => {\n      const { username } = verifyToken(context);\n\n      const post = await Post.findById(postId);\n      if (post) {\n        const commentIndex = post.comments.findIndex(({ id }) => id === commentId);\n        if (post.comments[commentIndex] ){\n          if(post.comments[commentIndex].username === username) {\n            post.comments.splice(commentIndex, 1);\n            await post.save();\n            return post;\n          } else throw new AuthenticationError('Action Not Allowed');\n        } else throw new UserInputError('Comment Not Found');\n      } else throw new UserInputError('Post Not Found');\n    }\n  }\n};\n"],"file":"comments.js"}